server:
   port: 8081

spring:
  application:
    name: USER-SERVICE
  datasource:
    url: jdbc:postgresql://localhost:5433/user-service
    username: postgres
    password: Nitesh11@@
    driver-class-name: org.postgresql.Driver

  jpa:
     hibernate:
        ddl-auto: update
     show-sql: true
     properties:
       hibernate:
          dialect: org.hibernate.dialect.PostgreSQL82Dialect

    # this cloud.import: "server host" is property to get the property
     # which are present on config server and user service is a client
  config:
    import: optional:configserver:http://localhost:8085


  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: https://dev-72514421.okta.com/oauth2/default
      client:
        registration:
          my-internal-client:
            provider: okta
            authorization-grant-type: client_credentials
            scope: internal
            client-id: 0oa853c39zhAfxMTM5d7
            client-secret: JtWbN8XPdZO26bsMaKH19zYjSEbuMD0eVzKSw64Y
        provider:
          okta:
            issuer-uri: https://dev-72514421.okta.com/oauth2/default

          #steps to enable this service as eureka client
          # steps 1) pom file update
          # 1-> add dependency eureka Discovery client
          # 2-> add dependency management tag
          # 3-> add cloud version below java version in pom.xml

          # steps 2) main application file update
          # 1-> add annotation @EnableEurekaClient

          #  steps 3) update yml file
#eureka:
#  instance:
#    prefer-ip-address: true
    #the below client property is by default true so it is not mandatory to write them
#  client:
#    fetch-registry: true
#    register-with-eureka: true
    #provide url of eureka server so that this project get register there
#    service-url:
#      defaultZone: http://localhost:8761/eureka


# circuit Breaker implementation steps
# 1) add dependecy -> circuit-Breaker, aop, Actuator
# 2) add Annotation CircuitBreaker
# 3) implement fallBackMethod
# 4) add configuration in yaml file -->

management:
  health:
    circuitbreaker:
      enabled: true
  endpoints:
     web:
      exposure:
        include: health
  endpoint:
    health:
      show-details: always

resilience4j:
  circuitbreaker:
    instances:
      ratingHotelBreaker:
        registerHealthIndicator: true
        eventConsumerBufferSize: 10
        failureRateThreshold: 50
        minimumNumberOfCalls: 5
        automaticTransitionFromOpenToHalfOpenEnabled: true
        permittedNumberOfCallsInHalfOpenState: 3
        slidingWindowSize: 10
        slidingWindowType: COUNT_BASED
# configuration for retry
  retry:
    instances:
      ratingHotelRetry:  # name of Retry
        max-attempt: 3   # try the destination service to call only 3 times after this call fallback methos
        wait-duration: 2s   # respose time 2 sec after that again try for recall

  ratelimiter:
    instances:
      userRateLimiter:
        limit-refresh-period: 4s
        limit-for-period: 2
        timeout-duration: 0s




okta:
  oauth2:
    issuer: https://dev-72514421.okta.com/oauth2/default
    audience: api://default
